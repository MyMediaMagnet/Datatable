{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nPLEASE NOTE\n: This package is currently under development and not production ready yet!\n\n\nOpenSkill/Datatable is a package for ~~\nlaravel4\n~~ and \nlaravel5\n as well as all other composer based projects that provides a server side handler for a number of javascript table plugins.\n\n\nCurrently it supports the following frontend tables:\n\n\n\n\nDatatables 1.9\n\n\n~~\nDatatables 1.10\n~~\n\n\n~~\nDynatable 0.3.1\n~~\n\n\n\n\nFeatures\n\n\nDatatable\n has a number of features:\n\n\n\n\nSupport ~~\nEloquent Models\n~~, \nCollections\n, ~~\nEloquent Query Builder\n~~ and ~~\nDoctrine Query\n~~\n\n\nEasy to use interface with fully configurable behaviour\n\n\nSupports \nDatatables 1.9\n, ~~\nDatatables 1.10\n~~ and ~~\nDynatable 0.3.1\n~~\n\n\nAutomatically generates html tables and the appropriate javascript on the side\n\n\nFully tested\n\n\nFully configurable\n\n\nExtensible\n\n\n\n\nQuickstart\n\n\nComposer\n\n\nThis package is available on \nhttp://packagist.org\n, just add it to your composer.json\n\n\nopenSkill/datatable\n: \n0.1.1\n\n\n\n\n\nAlternatively, you can install it using the composer command:\n\n\ncomposer require openSkill/datatable \n0.1.1\n\n\n\n\n\nLaravel\n\n\nThe package is built with Laravel in mind, so just add the following lines to app.php\n\n\nLaravel 5\n\n\n    'providers' =\n [\n\n        ...\n        OpenSkill\\Datatable\\DatatableServiceProvider::class,\n        ...\n    ],\n    'aliases' =\n [\n\n        ...\n        'Datatable'=\n OpenSkill\\Datatable\\Facades\\DatatableFacade::class,\n        ...\n    ],\n\n\n\n\nTo override the default configuration options you can publish the config file.\n\n\nphp artisan vendor:publish\n\n\n\n\nCogratulation\n, you are now able to use \nDatatable\n in your project. \n\n\nHead on\n to the next section", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "PLEASE NOTE : This package is currently under development and not production ready yet!  OpenSkill/Datatable is a package for ~~ laravel4 ~~ and  laravel5  as well as all other composer based projects that provides a server side handler for a number of javascript table plugins.  Currently it supports the following frontend tables:   Datatables 1.9  ~~ Datatables 1.10 ~~  ~~ Dynatable 0.3.1 ~~", 
            "title": "Introduction"
        }, 
        {
            "location": "/#features", 
            "text": "Datatable  has a number of features:   Support ~~ Eloquent Models ~~,  Collections , ~~ Eloquent Query Builder ~~ and ~~ Doctrine Query ~~  Easy to use interface with fully configurable behaviour  Supports  Datatables 1.9 , ~~ Datatables 1.10 ~~ and ~~ Dynatable 0.3.1 ~~  Automatically generates html tables and the appropriate javascript on the side  Fully tested  Fully configurable  Extensible", 
            "title": "Features"
        }, 
        {
            "location": "/#quickstart", 
            "text": "Composer  This package is available on  http://packagist.org , just add it to your composer.json  openSkill/datatable :  0.1.1   Alternatively, you can install it using the composer command:  composer require openSkill/datatable  0.1.1   Laravel  The package is built with Laravel in mind, so just add the following lines to app.php  Laravel 5      'providers' =  [\n\n        ...\n        OpenSkill\\Datatable\\DatatableServiceProvider::class,\n        ...\n    ],\n    'aliases' =  [\n\n        ...\n        'Datatable'=  OpenSkill\\Datatable\\Facades\\DatatableFacade::class,\n        ...\n    ],  To override the default configuration options you can publish the config file.  php artisan vendor:publish  Cogratulation , you are now able to use  Datatable  in your project.   Head on  to the next section", 
            "title": "Quickstart"
        }, 
        {
            "location": "/basic-usage/", 
            "text": "Simple Datatable\n\n\nThe simplest \nDatatable\n you can create looks like this:\n\n\n$t = Datatable::make(new CollectionProvider(User::all())-\nbuild();\n\nif ($t-\nshouldHandle()) {\n    return $t-\nhandleRequest();\n}\n\nreturn view('user-view', array('datatable' =\n $t-\nview()-\nbuild()));\n\n\n\n\nand on the view side\n\n\n{{\n    $view-\ntable();\n}}\n...\n{{\n    $view-\nscript();\n}}\n\n\n\n\n\nIn this example we do the following:\n\n\n\n\nGet all users with \nUser::all()\n \n\n\nPass the user collection to a \nCollectionProvider\n\n\nBuild the \nDatatableService\n \n\n\n\n\nWe then check if the \nDatatableService\n should handle the result and if so return the \n$t-\nhandleRequest()\n.\n\n\nPlease Note\n: We are using the default coumns of the \nUser\n model which means all columns by default.\nOn the view side we then just render the \ntable\n and the \njavascript\n part\n\n\nMore advanced example\n\n\nA more sophicticated example could look like this:\n\n\n$t = Datatable::make(new CollectionProvider(User::all())\n    -\ncolumns('id') // show the id column of the user model\n    -\ncolumns('name') // also show the full name of the user\n    -\nbuild();\n\nif ($t-\nshouldHandle()) {\n    return $t-\nhandleRequest();\n}\n\nreturn view('user-view', array('datatable' =\n $t-\nview()-\nbuild()));", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/basic-usage/#simple-datatable", 
            "text": "The simplest  Datatable  you can create looks like this:  $t = Datatable::make(new CollectionProvider(User::all())- build();\n\nif ($t- shouldHandle()) {\n    return $t- handleRequest();\n}\n\nreturn view('user-view', array('datatable' =  $t- view()- build()));  and on the view side  {{\n    $view- table();\n}}\n...\n{{\n    $view- script();\n}}  In this example we do the following:   Get all users with  User::all()    Pass the user collection to a  CollectionProvider  Build the  DatatableService     We then check if the  DatatableService  should handle the result and if so return the  $t- handleRequest() .  Please Note : We are using the default coumns of the  User  model which means all columns by default.\nOn the view side we then just render the  table  and the  javascript  part", 
            "title": "Simple Datatable"
        }, 
        {
            "location": "/basic-usage/#more-advanced-example", 
            "text": "A more sophicticated example could look like this:  $t = Datatable::make(new CollectionProvider(User::all())\n    - columns('id') // show the id column of the user model\n    - columns('name') // also show the full name of the user\n    - build();\n\nif ($t- shouldHandle()) {\n    return $t- handleRequest();\n}\n\nreturn view('user-view', array('datatable' =  $t- view()- build()));", 
            "title": "More advanced example"
        }
    ]
}